id: 00fca433-505e-46c8-8ef7-eaf3d6f7f790
name: Privilege Escalation Attempt via Role Management and Group Access Estimation
description: |-
  This detection identifies potential privilege escalation attempts where users leverage PowerShell to enumerate groups and assess their ability to modify them through Microsoft Graph API. The rule specifically targets reconnaissance activities where users query the role management "estimateAccess" API or enumerate all groups to identify potential authorization gaps they could exploit. The detection incorporates blast radius assessment by prioritizing activities performed by users with existing privileges, who may be looking to further expand their access.

  The rule captures scenarios where an attacker or insider threat first enumerates all available groups in the tenant and then systematically tests their ability to modify these groups using the estimateAccess API endpoint. This pattern indicates deliberate permission probing rather than legitimate administrative actions. Each alert includes contextual information about the user's existing privileges, organizational position, and access patterns to help security teams quickly assess the risk level and determine appropriate response actions.
severity: High
requiredDataConnectors:
  - connectorId: MicrosoftGraphActivityLogs
    dataTypes:
      - MicrosoftGraphActivityLogs
queryFrequency: P1D
queryPeriod: P1D
triggerOperator: gt
triggerThreshold: 0
status: Available
tactics:
  - Reconnaissance
  - InitialAccess
  - PrivilegeEscalation
  - Discovery
techniques:
  - T1591
  - T0866
  - T1078
  - T1087
query: |-
  // Get most recent identity info to join later, including blast radius indicators
  let RecentIdentityInfo = IdentityInfo
  | where TimeGenerated > ago(10d)
  | extend
  // Parse assigned roles from JSON format
  ParsedRoles = iff(isnotempty(AssignedRoles) and AssignedRoles != "[]", parse_json(AssignedRoles), dynamic([])),
  // Parse group memberships from JSON format
  ParsedGroups = iff(isnotempty(GroupMembership) and GroupMembership != "[]", parse_json(GroupMembership), dynamic([])),
  // Check for privileged roles
  IsAdmin = iff(isnotempty(AssignedRoles) and AssignedRoles != "[]", true, false),
  IsPrivilegedRole = iff(
  AssignedRoles has_any("Global Administrator", "Privileged Role Administrator", "User Administrator", "SharePoint Administrator", "Exchange Administrator", "Hybrid Identity Administrator", "Application Administrator", "Cloud Application Administrator"),
  true, false
  ),
  // Check for privileged group memberships
  IsInPrivilegedGroup = iff(
  GroupMembership has_any("AdminAgents", "Azure AD Joined Device Local Administrators", "Directory Synchronization Accounts", "Domain Admins", "Enterprise Admins", "Schema Admins", "Key Admins"),
  true, false
  ),
  EmployeeId = JobTitle,
  Department = Department,
  Manager = Manager
  | summarize arg_max(TimeGenerated, *) by AccountObjectId; // Take only the most recent record per account
  // Find Graph API calls accessing role management or generic groups
  MicrosoftGraphActivityLogs
  | where UserAgent contains "PowerShell"
  | where RequestUri == "https://graph.microsoft.com/beta/roleManagement/directory/estimateAccess" or RequestUri == "https://graph.microsoft.com/v1.0/groups"
  | join kind = leftouter AADNonInteractiveUserSignInLogs
  on $left.SignInActivityId == $right.UniqueTokenIdentifier
  | join kind = leftouter RecentIdentityInfo
  on $left.UserId == $right.AccountObjectId
  | where isnotempty(UserId) // Only include records where we have a valid UserId
  | extend
  UserDisplayName = iff(isnotempty(AccountDisplayName), AccountDisplayName, UserDisplayName),
  RoleCount = iff(isnotempty(ParsedRoles), array_length(ParsedRoles), 0),
  GroupCount = iff(isnotempty(ParsedGroups), array_length(ParsedGroups), 0),
  KeyAdminGroups = iff(isnotempty(ParsedGroups),
  set_intersect(ParsedGroups, dynamic(["AdminAgents", "Azure AD Joined Device Local Administrators", "Directory Synchronization Accounts", "Domain Admins", "Enterprise Admins", "Schema Admins", "Key Admins", "Azure DevOps Administrators", "Security Administrators", "Global Readers"])),
  dynamic([])),
  AccessType = case(
  RequestUri == "https://graph.microsoft.com/beta/roleManagement/directory/estimateAccess", "Role Management Access Estimation",
  RequestUri == "https://graph.microsoft.com/v1.0/groups", "All Groups Enumeration",
  "Other Access"
  )
  // Add filters to reduce the number of results
  | where ResultType == 0 or isnull(ResultType) // Only successful sign-ins or when ResultType isn't available
  | summarize
  RequestCount = count(),
  FirstActivity = min(TimeGenerated),
  LastActivity = max(TimeGenerated),
  RequestURIs = make_set(RequestUri, 10),
  UserAgents = make_set(UserAgent, 5),
  AccessTypes = make_set(AccessType)
  by
  UserId,
  UserDisplayName,
  AccountUPN,
  UserPrincipalName,
  IPAddress,
  Department,
  EmployeeId,
  Manager,
  IsAdmin,
  IsPrivilegedRole,
  IsInPrivilegedGroup,
  tostring(ParsedRoles),
  RoleCount,
  tostring(KeyAdminGroups),
  GroupCount
  | extend
  BlastRadiusSeverity = case(
  IsPrivilegedRole == true, "Critical",
  IsAdmin == true or IsInPrivilegedGroup == true, "High",
  RoleCount > 0, "Medium",
  "Low"
  ),
  ActivityDurationMinutes = datetime_diff('minute', LastActivity, FirstActivity),
  UniqueEndpointsAccessed = array_length(RequestURIs)
  | order by BlastRadiusSeverity asc, RequestCount desc, ActivityDurationMinutes desc
entityMappings:
  - entityType: Account
    fieldMappings:
      - identifier: Name
        columnName: UserPrincipalName
      - identifier: DisplayName
        columnName: UserDisplayName
  - entityType: IP
    fieldMappings:
      - identifier: Address
        columnName: IPAddress
  - entityType: URL
    fieldMappings:
      - identifier: Url
        columnName: RequestURIs
incidentConfiguration:
  createIncident: true
  groupingConfiguration:
    enabled: false
    reopenClosedIncident: false
    lookbackDuration: PT5H
    matchingMethod: AllEntities
    groupByEntities: []
    groupByAlertDetails: []
    groupByCustomDetails: []
eventGroupingSettings:
  aggregationKind: SingleAlert
suppressionDuration: PT5H
suppressionEnabled: false
version: 1.0.0
kind: Scheduled
