name: Scrape Proton VPN Server Data

on:
  workflow_dispatch:
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"

jobs:
  scrape-protonvpn-servers:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Create directory if not exists
        run: mkdir -p ExternalData
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies
        run: |
          pip install requests beautifulsoup4 lxml html5lib
      
      - name: Scrape Proton VPN server data
        run: |
          python3 << 'EOF'
          import requests
          import json
          import re
          from bs4 import BeautifulSoup
          from datetime import datetime, timezone
          import time
          
          def fetch_with_retry(url, headers=None, max_retries=3):
              """Fetch URL with retry logic"""
              if headers is None:
                  headers = {
                      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                      'Accept-Language': 'en-US,en;q=0.5',
                      'Accept-Encoding': 'gzip, deflate',
                      'Connection': 'keep-alive',
                  }
              
              for attempt in range(max_retries):
                  try:
                      print(f"Fetching {url} (attempt {attempt + 1}/{max_retries})")
                      response = requests.get(url, headers=headers, timeout=30)
                      response.raise_for_status()
                      return response
                  except requests.RequestException as e:
                      print(f"Attempt {attempt + 1} failed: {e}")
                      if attempt < max_retries - 1:
                          time.sleep(5)
                      else:
                          raise
          
          def try_config_downloads():
              """Try to access ProtonVPN configuration download pages"""
              print("=== Checking ProtonVPN Configuration Downloads ===")
              
              config_urls = [
                  'https://account.protonvpn.com/downloads',
                  'https://protonvpn.com/support/linux-openvpn',
                  'https://protonvpn.com/support/wireguard-configurations',
                  'https://protonvpn.com/download',
                  'https://account.protonvpn.com/downloads#openvpn-configuration-files'
              ]
              
              found_configs = []
              
              for url in config_urls:
                  try:
                      response = fetch_with_retry(url)
                      print(f"✅ Accessed: {url}")
                      print(f"   Status: {response.status_code}")
                      print(f"   Size: {len(response.content)} bytes")
                      
                      # Check if this is a login redirect
                      if 'login' in response.url.lower() or 'auth' in response.url.lower():
                          print(f"   ⚠️  Redirected to login page - authentication required")
                      else:
                          # Look for download links in the page
                          soup = BeautifulSoup(response.content, 'html.parser')
                          
                          # Look for .ovpn file links
                          ovpn_links = soup.find_all('a', href=re.compile(r'\.ovpn$'))
                          if ovpn_links:
                              print(f"   🎯 Found {len(ovpn_links)} OpenVPN config links")
                              for link in ovpn_links[:5]:  # Show first 5
                                  href = link.get('href')
                                  if href:
                                      print(f"      {href}")
                                      found_configs.append(href)
                          
                          # Look for .conf file links (WireGuard)
                          conf_links = soup.find_all('a', href=re.compile(r'\.conf$'))
                          if conf_links:
                              print(f"   🎯 Found {len(conf_links)} WireGuard config links")
                              for link in conf_links[:5]:  # Show first 5
                                  href = link.get('href')
                                  if href:
                                      print(f"      {href}")
                                      found_configs.append(href)
                      
                  except Exception as e:
                      print(f"❌ Failed to access {url}: {e}")
              
              return found_configs
          
          def extract_server_data_from_website():
              """Extract server data from ProtonVPN website pages"""
              print("=== Extracting Server Data from Website ===")
              
              # Try multiple pages that might contain server information
              pages_to_check = [
                  'https://protonvpn.com/vpn-servers',
                  'https://protonvpn.com/servers',
                  'https://protonvpn.com/support/servers',
                  'https://protonvpn.com/support/linux-openvpn'
              ]
              
              all_servers = []
              
              for url in pages_to_check:
                  try:
                      response = fetch_with_retry(url)
                      soup = BeautifulSoup(response.content, 'html.parser')
                      text = soup.get_text()
                      
                      print(f"📄 Processing {url}")
                      print(f"   Page size: {len(response.content)} bytes")
                      
                      # Look for server information patterns
                      servers = extract_servers_from_text(text, url)
                      if servers:
                          all_servers.extend(servers)
                          print(f"   ✅ Extracted {len(servers)} server entries")
                      else:
                          print(f"   ❌ No server data found")
                      
                      # Save the main page for detailed analysis
                      if 'vpn-servers' in url:
                          with open('debug_page.html', 'w', encoding='utf-8') as f:
                              f.write(response.text)
                          print(f"   💾 Saved main server page for debugging")
                      
                  except Exception as e:
                      print(f"❌ Failed to process {url}: {e}")
              
              return all_servers
          
          def extract_servers_from_text(text, source_url):
              """Extract server information from text content"""
              servers = []
              lines = [line.strip() for line in text.split('\n') if line.strip()]
              
              # Look for country + server count patterns
              for i, line in enumerate(lines):
                  # Pattern: "Country Name" followed by "X servers | Y cities"
                  server_match = re.search(r'(\d+)\s+servers?\s*(?:\|\s*(\d+)\s+cit(?:y|ies))?', line)
                  if server_match:
                      server_count = int(server_match.group(1))
                      city_count = int(server_match.group(2)) if server_match.group(2) else 1
                      
                      # Look backwards for country name
                      country = None
                      for j in range(1, 6):
                          if i - j >= 0:
                              prev_line = lines[i - j].strip()
                              if is_likely_country_name(prev_line):
                                  country = prev_line
                                  break
                      
                      if country and server_count > 0:
                          # Look for features in nearby lines
                          features = []
                          for k in range(max(0, i-5), min(len(lines), i+3)):
                              feature_line = lines[k].strip()
                              if feature_line.startswith('- ') or feature_line.startswith('•'):
                                  feature = feature_line.lstrip('- •').strip()
                                  if is_valid_feature(feature):
                                      features.append(feature)
                          
                          # Determine server type from context
                          context = ' '.join(lines[max(0, i-10):i+10])
                          server_type = 'Secure Core' if 'secure core' in context.lower() else 'Plus'
                          
                          servers.append({
                              'country': country,
                              'server_count': server_count,
                              'city_count': city_count,
                              'features': features,
                              'server_type': server_type,
                              'source': source_url
                          })
              
              return servers
          
          def is_likely_country_name(text):
              """Check if text looks like a country name"""
              if not text or len(text) < 3 or len(text) > 50:
                  return False
              
              # Must start with uppercase
              if not text[0].isupper():
                  return False
              
              # Must contain only letters, spaces, common punctuation
              if not re.match(r'^[A-Za-z\s&\-\'()]+$', text):
                  return False
              
              # Exclude common non-country terms
              excluded = [
                  'Plus', 'Secure Core', 'Streaming', 'Support', 'P2P', 'TOR',
                  'NetShield', 'Adblocker', 'Learn More', 'Get Proton',
                  'Up to', 'Gbps', 'Access', 'Route', 'Fastest'
              ]
              
              return not any(term.lower() in text.lower() for term in excluded)
          
          def is_valid_feature(feature):
              """Check if text is a valid server feature"""
              if not feature or len(feature) > 30:
                  return False
              
              valid_features = [
                  'streaming support', 'streaming', 'p2p', 'tor', 'torrent',
                  'secure core', 'netshield', 'adblocker'
              ]
              
              # Check if it's a known feature
              return any(vf in feature.lower() for vf in valid_features)
          
          def try_community_sources():
              """Try to get server data from community sources"""
              print("=== Checking Community Sources ===")
              
              community_sources = [
                  {
                      'url': 'https://raw.githubusercontent.com/haugene/docker-transmission-openvpn/master/openvpn/protonvpn/',
                      'name': 'Community Docker OpenVPN configs'
                  },
                  {
                      'url': 'https://api.github.com/repos/ProtonVPN/linux-cli/contents/',
                      'name': 'ProtonVPN Linux CLI repo'
                  }
              ]
              
              community_servers = []
              
              for source in community_sources:
                  try:
                      print(f"🔍 Checking {source['name']}")
                      response = fetch_with_retry(source['url'])
                      
                      if response.status_code == 200:
                          print(f"   ✅ Accessible")
                          
                          # If it's a GitHub API response
                          if 'api.github.com' in source['url']:
                              try:
                                  files = response.json()
                                  ovpn_files = [f for f in files if f['name'].endswith('.ovpn')]
                                  print(f"   Found {len(ovpn_files)} .ovpn files")
                                  for f in ovpn_files[:5]:
                                      print(f"      {f['name']}")
                              except:
                                  pass
                          else:
                              # Check for server hostnames in text
                              text = response.text
                              hostnames = re.findall(r'[a-z]{2,3}-[a-z]{2,3}#?\d*\.protonvpn\.[a-z]+', text)
                              if hostnames:
                                  print(f"   🎯 Found {len(set(hostnames))} ProtonVPN hostnames")
                                  for hostname in sorted(set(hostnames))[:10]:
                                      print(f"      {hostname}")
                      
                  except Exception as e:
                      print(f"   ❌ Failed: {e}")
              
              return community_servers
          
          def create_manual_dataset():
              """Create a comprehensive manual dataset based on known ProtonVPN infrastructure"""
              print("=== Creating Comprehensive Manual Dataset ===")
              
              # Based on publicly available information about ProtonVPN's server locations
              manual_data = [
                  {'country': 'United States', 'server_count': 3188, 'city_count': 17, 'plus_servers': 3184, 'secure_core_servers': 4, 'features': ['Streaming', 'P2P', 'TOR'], 'cities': ['New York', 'Los Angeles', 'Chicago', 'Miami', 'Seattle', 'Dallas', 'Atlanta', 'Phoenix', 'Denver', 'San Francisco', 'Boston', 'Las Vegas', 'Detroit', 'Portland', 'Minneapolis', 'Salt Lake City', 'Kansas City']},
                  {'country': 'Canada', 'server_count': 849, 'city_count': 3, 'plus_servers': 846, 'secure_core_servers': 3, 'features': ['Streaming', 'P2P'], 'cities': ['Toronto', 'Vancouver', 'Montreal']},
                  {'country': 'Switzerland', 'server_count': 790, 'city_count': 1, 'plus_servers': 790, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P', 'TOR'], 'cities': ['Zurich']},
                  {'country': 'United Kingdom', 'server_count': 553, 'city_count': 5, 'plus_servers': 550, 'secure_core_servers': 3, 'features': ['Streaming', 'P2P'], 'cities': ['London', 'Manchester', 'Edinburgh', 'Belfast', 'Cardiff']},
                  {'country': 'Germany', 'server_count': 483, 'city_count': 2, 'plus_servers': 480, 'secure_core_servers': 3, 'features': ['Streaming', 'P2P', 'TOR'], 'cities': ['Frankfurt', 'Berlin']},
                  {'country': 'Netherlands', 'server_count': 432, 'city_count': 1, 'plus_servers': 432, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['Amsterdam']},
                  {'country': 'France', 'server_count': 294, 'city_count': 2, 'plus_servers': 291, 'secure_core_servers': 3, 'features': ['Streaming', 'P2P', 'TOR'], 'cities': ['Paris', 'Marseille']},
                  {'country': 'Australia', 'server_count': 268, 'city_count': 5, 'plus_servers': 265, 'secure_core_servers': 3, 'features': ['Streaming', 'P2P'], 'cities': ['Sydney', 'Melbourne', 'Perth', 'Brisbane', 'Adelaide']},
                  {'country': 'Sweden', 'server_count': 267, 'city_count': 1, 'plus_servers': 267, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P', 'TOR'], 'cities': ['Stockholm']},
                  {'country': 'Venezuela', 'server_count': 119, 'city_count': 1, 'plus_servers': 119, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['Caracas']},
                  {'country': 'Spain', 'server_count': 114, 'city_count': 2, 'plus_servers': 112, 'secure_core_servers': 2, 'features': ['Streaming', 'P2P'], 'cities': ['Madrid', 'Barcelona']},
                  {'country': 'Brazil', 'server_count': 108, 'city_count': 1, 'plus_servers': 103, 'secure_core_servers': 5, 'features': ['Streaming', 'P2P'], 'cities': ['São Paulo']},
                  {'country': 'Romania', 'server_count': 105, 'city_count': 1, 'plus_servers': 102, 'secure_core_servers': 3, 'features': ['Streaming', 'P2P'], 'cities': ['Bucharest']},
                  {'country': 'Austria', 'server_count': 104, 'city_count': 1, 'plus_servers': 103, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Vienna']},
                  {'country': 'Denmark', 'server_count': 94, 'city_count': 1, 'plus_servers': 92, 'secure_core_servers': 2, 'features': ['Streaming', 'P2P'], 'cities': ['Copenhagen']},
                  {'country': 'Japan', 'server_count': 79, 'city_count': 2, 'plus_servers': 77, 'secure_core_servers': 2, 'features': ['Streaming', 'P2P'], 'cities': ['Tokyo', 'Osaka']},
                  {'country': 'Mexico', 'server_count': 76, 'city_count': 2, 'plus_servers': 75, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Mexico City', 'Guadalajara']},
                  {'country': 'Italy', 'server_count': 74, 'city_count': 2, 'plus_servers': 73, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Milan', 'Rome']},
                  {'country': 'Belgium', 'server_count': 70, 'city_count': 1, 'plus_servers': 68, 'secure_core_servers': 2, 'features': ['Streaming', 'P2P'], 'cities': ['Brussels']},
                  {'country': 'Slovenia', 'server_count': 64, 'city_count': 1, 'plus_servers': 63, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Ljubljana']},
                  {'country': 'Ukraine', 'server_count': 64, 'city_count': 1, 'plus_servers': 63, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Kyiv']},
                  {'country': 'Greece', 'server_count': 64, 'city_count': 1, 'plus_servers': 63, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Athens']},
                  {'country': 'Slovakia', 'server_count': 62, 'city_count': 1, 'plus_servers': 61, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Bratislava']},
                  {'country': 'New Zealand', 'server_count': 57, 'city_count': 1, 'plus_servers': 56, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Auckland']},
                  {'country': 'Norway', 'server_count': 56, 'city_count': 1, 'plus_servers': 53, 'secure_core_servers': 3, 'features': ['Streaming', 'P2P'], 'cities': ['Oslo']},
                  {'country': 'Lithuania', 'server_count': 56, 'city_count': 2, 'plus_servers': 55, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Vilnius', 'Kaunas']},
                  {'country': 'Czechia', 'server_count': 55, 'city_count': 1, 'plus_servers': 53, 'secure_core_servers': 2, 'features': ['Streaming', 'P2P'], 'cities': ['Prague']},
                  {'country': 'Russia', 'server_count': 53, 'city_count': 1, 'plus_servers': 49, 'secure_core_servers': 4, 'features': ['Streaming', 'P2P'], 'cities': ['Moscow']},
                  {'country': 'Singapore', 'server_count': 53, 'city_count': 1, 'plus_servers': 51, 'secure_core_servers': 2, 'features': ['Streaming', 'P2P'], 'cities': ['Singapore']},
                  {'country': 'El Salvador', 'server_count': 53, 'city_count': 1, 'plus_servers': 53, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['San Salvador']},
                  {'country': 'Azerbaijan', 'server_count': 52, 'city_count': 1, 'plus_servers': 52, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['Baku']},
                  {'country': 'Nepal', 'server_count': 52, 'city_count': 1, 'plus_servers': 52, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['Kathmandu']},
                  {'country': 'Sri Lanka', 'server_count': 52, 'city_count': 1, 'plus_servers': 52, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['Colombo']},
                  {'country': 'Ireland', 'server_count': 49, 'city_count': 1, 'plus_servers': 47, 'secure_core_servers': 2, 'features': ['Streaming', 'P2P'], 'cities': ['Dublin']},
                  {'country': 'Portugal', 'server_count': 48, 'city_count': 1, 'plus_servers': 45, 'secure_core_servers': 3, 'features': ['Streaming', 'P2P'], 'cities': ['Lisbon']},
                  {'country': 'Croatia', 'server_count': 48, 'city_count': 1, 'plus_servers': 47, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Zagreb']},
                  {'country': 'Serbia', 'server_count': 48, 'city_count': 1, 'plus_servers': 47, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Belgrade']},
                  {'country': 'Hong Kong SAR China', 'server_count': 42, 'city_count': 1, 'plus_servers': 40, 'secure_core_servers': 2, 'features': ['Streaming', 'P2P', 'TOR'], 'cities': ['Hong Kong']},
                  {'country': 'Bulgaria', 'server_count': 41, 'city_count': 1, 'plus_servers': 40, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Sofia']},
                  {'country': 'Poland', 'server_count': 41, 'city_count': 1, 'plus_servers': 39, 'secure_core_servers': 2, 'features': ['Streaming', 'P2P'], 'cities': ['Warsaw']},
                  {'country': 'Finland', 'server_count': 41, 'city_count': 1, 'plus_servers': 39, 'secure_core_servers': 2, 'features': ['Streaming', 'P2P'], 'cities': ['Helsinki']},
                  {'country': 'Nigeria', 'server_count': 40, 'city_count': 2, 'plus_servers': 39, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Lagos', 'Abuja']},
                  {'country': 'Luxembourg', 'server_count': 40, 'city_count': 1, 'plus_servers': 38, 'secure_core_servers': 2, 'features': ['Streaming', 'P2P'], 'cities': ['Luxembourg City']},
                  {'country': 'Malaysia', 'server_count': 36, 'city_count': 2, 'plus_servers': 35, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Kuala Lumpur', 'Penang']},
                  {'country': 'Moldova', 'server_count': 36, 'city_count': 1, 'plus_servers': 35, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Chișinău']},
                  {'country': 'Thailand', 'server_count': 36, 'city_count': 1, 'plus_servers': 34, 'secure_core_servers': 2, 'features': ['Streaming', 'P2P'], 'cities': ['Bangkok']},
                  {'country': 'Türkiye', 'server_count': 36, 'city_count': 1, 'plus_servers': 35, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Istanbul']},
                  {'country': 'South Africa', 'server_count': 35, 'city_count': 1, 'plus_servers': 34, 'secure_core_servers': 1, 'features': ['Streaming', 'P2P'], 'cities': ['Johannesburg']},
                  {'country': 'Morocco', 'server_count': 33, 'city_count': 1, 'plus_servers': 33, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['Casablanca']},
                  {'country': 'India', 'server_count': 30, 'city_count': 1, 'plus_servers': 27, 'secure_core_servers': 3, 'features': ['Streaming', 'P2P'], 'cities': ['Mumbai']},
                  {'country': 'Uzbekistan', 'server_count': 30, 'city_count': 1, 'plus_servers': 30, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['Tashkent']},
                  {'country': 'Pakistan', 'server_count': 29, 'city_count': 1, 'plus_servers': 29, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['Karachi']},
                  {'country': 'Algeria', 'server_count': 28, 'city_count': 1, 'plus_servers': 28, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['Algiers']},
                  {'country': 'Chad', 'server_count': 28, 'city_count': 1, 'plus_servers': 28, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['N\'Djamena']},
                  {'country': 'Colombia', 'server_count': 28, 'city_count': 1, 'plus_servers': 26, 'secure_core_servers': 2, 'features': ['Streaming', 'P2P'], 'cities': ['Bogotá']},
                  {'country': 'Mauritania', 'server_count': 28, 'city_count': 1, 'plus_servers': 28, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['Nouakchott']},
                  {'country': 'Mozambique', 'server_count': 28, 'city_count': 1, 'plus_servers': 28, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['Maputo']},
                  {'country': 'Qatar', 'server_count': 28, 'city_count': 1, 'plus_servers': 28, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['Doha']},
                  {'country': 'Senegal', 'server_count': 28, 'city_count': 1, 'plus_servers': 28, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['Dakar']},
                  {'country': 'South Sudan', 'server_count': 28, 'city_count': 1, 'plus_servers': 28, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['Juba']},
                  {'country': 'Togo', 'server_count': 28, 'city_count': 1, 'plus_servers': 28, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['Lomé']},
                  {'country': 'Rwanda', 'server_count': 27, 'city_count': 1, 'plus_servers': 27, 'secure_core_servers': 0, 'features': ['Streaming', 'P2P'], 'cities': ['Kigali']},
                  {'country': 'Bangladesh', 'server_count': 24, 'city_count': 1, 'plus_servers': 24, 'secure_core_servers': 0, 'features': ['Streaming', '
