name: Pull external data source Sentinel UK prices

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 */1 * *'

jobs:
  pull-sentinel-prices:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Create directory if not exists
        run: mkdir -p ExternalData
      
      - name: Fetch Microsoft Sentinel Prices and create CSV
        run: |
          echo "Fetching Microsoft Sentinel pricing data..."
          
          # Define the API URL with proper encoding
          api_url="https://prices.azure.com/api/retail/prices"
          filter_param="productName eq 'Sentinel' and (location eq 'UK South' or location eq 'UK West')"
          currency="GBP"
          
          # Add retry logic for rate limiting
          max_attempts=5
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts..."
            
            # Use curl with proper URL encoding
            response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -H "User-Agent: SentinelPriceMonitor/1.0" \
              -H "Accept: application/json" \
              -G \
              --data-urlencode "currencyCode=$currency" \
              --data-urlencode "\$filter=$filter_param" \
              "$api_url" 2>&1)
            
            # Check if curl succeeded
            if [ $? -ne 0 ]; then
              echo "Curl failed: $response"
              if [ $attempt -lt $max_attempts ]; then
                sleep_time=$((10 * attempt))
                echo "Waiting ${sleep_time} seconds before retry..."
                sleep $sleep_time
                attempt=$((attempt + 1))
                continue
              else
                echo "Failed after $max_attempts attempts"
                exit 1
              fi
            fi
            
            # Extract HTTP status and body
            if echo "$response" | grep -q "HTTPSTATUS:"; then
              http_code=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
              json_data=$(echo "$response" | sed 's/HTTPSTATUS:[0-9]*$//')
            else
              echo "No HTTP status found in response: $response"
              exit 1
            fi
            
            echo "HTTP Status: $http_code"
            
            if [ "$http_code" = "200" ]; then
              echo "Successfully retrieved pricing data"
              break
            elif [ "$http_code" = "429" ]; then
              if [ $attempt -lt $max_attempts ]; then
                # Exponential backoff: 30s, 60s, 120s, 240s
                sleep_time=$((30 * attempt))
                echo "Rate limited. Waiting ${sleep_time} seconds before retry..."
                sleep $sleep_time
              else
                echo "Rate limit exceeded after $max_attempts attempts"
                exit 1
              fi
            else
              echo "API error: HTTP $http_code"
              echo "Response sample (first 500 chars): $(echo "$json_data" | head -c 500)"
              if [ $attempt -lt $max_attempts ]; then
                sleep_time=$((10 * attempt))
                echo "Waiting ${sleep_time} seconds before retry..."
                sleep $sleep_time
              else
                exit 1
              fi
            fi
            
            attempt=$((attempt + 1))
          done
          
          # Validate JSON response
          if ! echo "$json_data" | jq . > /dev/null 2>&1; then
            echo "Error: Invalid JSON response"
            echo "Response sample: $(echo "$json_data" | head -c 1000)"
            exit 1
          fi
          
          # Check if we have items
          item_count=$(echo "$json_data" | jq '.Items | length // 0')
          echo "Found $item_count pricing items"
          
          if [ "$item_count" -eq 0 ]; then
            echo "Warning: No pricing items found"
            # Create empty files rather than failing
            echo "skuName,unitOfMeasure,type,retailPrice,unitPrice,currencyCode,location,effectiveStartDate,meterId,meterName,skuId,productName,serviceFamily" > ExternalData/UKSentinelPrices.csv
            echo '{"message": "No pricing data available"}' > ExternalData/UKSentinelPrices.json
          else
            # Convert to CSV using jq
            echo "$json_data" | jq -r '
              ["skuName","unitOfMeasure","type","retailPrice","unitPrice","currencyCode","location","effectiveStartDate","meterId","meterName","skuId","productName","serviceFamily"],
              (.Items | sort_by(.location, .skuName)[] | 
                [
                  .skuName // "",
                  .unitOfMeasure // "",
                  .type // "",
                  .retailPrice // 0,
                  .unitPrice // 0,
                  .currencyCode // "",
                  .location // "",
                  .effectiveStartDate // "",
                  .meterId // "",
                  .meterName // "",
                  .skuId // "",
                  .productName // "",
                  .serviceFamily // ""
                ]
              ) | @csv
            ' > ExternalData/UKSentinelPrices.csv
            
            # Save JSON as well
            echo "$json_data" | jq '.Items | sort_by(.location, .skuName)' > ExternalData/UKSentinelPrices.json
          fi
          
          echo "Processing completed successfully"
      
      - name: Commit updated data to repo
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update Microsoft Sentinel Prices - $(date -u +%Y-%m-%d)"
          file_pattern: 'ExternalData/UKSentinelPrices.*'
          commit_user_name: 'Sentinel Price Updater'
          commit_user_email: 'actions@github.com'
          push_options: '--force-with-lease'
